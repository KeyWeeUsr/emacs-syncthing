; -*- mode: emacs-lisp; lexical-binding: t -*-

;; Uncomment some calls below as needed for your project.
;(eldev-use-package-archive 'gnu-elpa)
;(eldev-use-package-archive 'nongnu-elpa)
;(eldev-use-package-archive 'melpa)

(eldev-use-plugin 'autoloads)
(eldev-use-plugin 'undercover)

(eldev-defcommand tag (tag)
  "Make a new tag"
  :parameters "TAG"
  (unless tag
    (signal 'eldev-wrong-command-usage))
  (let ((name "syncthing.el")
        (buff (get-buffer-create "*output*")))
    (when (< 0 (call-process "git" nil buff nil "add" "-f" "."))
      (eldev-output (with-current-buffer buff (buffer-string)))
      (error "Failed to add files"))
    (when (< 0 (call-process "git" nil buff nil "stash"))
      (eldev-output (with-current-buffer buff (buffer-string)))
      (error "Failed to stash files"))
    (with-temp-buffer
      (insert-file-contents name)
      (goto-char (point-min))
      (re-search-forward tag))
    (when (< 0 (call-process "git" nil buff nil "tag" tag "--sign"))
      (eldev-output (with-current-buffer buff (buffer-string)))
      (error "Failed to tag and sign"))))

(defsubst eval-in-client (name script)
  (unless (consp script)
    (user-error "Invalid script: %s" script))

  (let ((client (or (getenv "EMACSCLIENT") "emacsclient"))
        (sock (or (getenv "EMACS_SOCKET_NAME") "/run/user/1000/emacs/server")))
    (unless (executable-find client)
      (error "Emacsclient not found"))

    (start-process name nil client "--socket-name" sock "--eval"
                   (format "%S" script))))

(eldev-defcommand demo ()
  "Run demo"
  (let* ((host (or (getenv "DEMO_HOST") "127.0.0.1"))
         (port (or (getenv "DEMO_PORT") "5000"))
         (proto "http")
         (demo-addr (format "%s://%s:%s" proto host port))
         (data-dir (or (getenv "DEMO_DATA") default-directory))
         (server-name "syncthing-demo-server"))

    (eval-in-client "syncthing-demo"
                    `(progn (load-file "demo/demo.el")
                            (syncthing-demo "Demo" ,demo-addr)))

    (let ((process-environment
           (append process-environment
                   `(,(format "DEMO_HOST=%s" host)
                     ,(format "DEMO_PORT=%s" port)
                     ,(format "DEMO_DATA=%s" data-dir)))))
      (load-file "demo/demo-server.el"))
    (while t (sit-for 1))))

(when (getenv "CI")
  (setf eldev-test-fileset `(:and ,eldev-test-fileset (:not "features"))))
